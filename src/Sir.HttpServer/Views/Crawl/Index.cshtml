@{
    Layout = "~/Views/_Layout.cshtml";
}
@{ 
    var searchLink = $"{Context.Request.Path.Value.ToLower().Replace("/crawl", "/search")}{Context.Request.QueryString}";
    var collection = (ViewBag.Collection ?? Context.Request.Query["collection"]).ToString();
    var q = (ViewBag.Q ?? Context.Request.Query["q"]).ToString();
    var field = (ViewBag.Field ?? Context.Request.Query["field"]).ToString();
    var job = (string)ViewBag.Job;
} 
    <form action="/crawl/@Context.Request.QueryString" method="post">
        <div class="blog-wrapper">
            <a href="@searchLink">&#8592; Back to result</a>
            <h2>Crawl your result</h2>
            @if (ViewBag.JobValidationError != null)
            {
                <div class="validation-error">@ViewBag.JobValidationError</div>
            }
            <p>
                <label><input type="radio" name="job" value="fi" @Html.Raw((job == "fi") ? "checked" : "") /> <strong>Fetch referenced WARC files and index</strong> their content.</label>
            </p>
            <p>
                <label><input type="radio" name="job" value="ei" @Html.Raw((job == "ei") ? "checked" : "")/> <strong>Extract from WARC files and index</strong> those resources referenced in your result.</label>
            </p>
            <p>
                <label><input type="radio" name="job" value="wci" @Html.Raw((job == "wci") ? "checked" : "") /> <strong>Web crawl and index</strong> those resources referenced in your result.</label>
            </p>
            <p>
                <label><input type="radio" name="job" value="rwci" @Html.Raw((job == "rwci") ? "checked" : "")/> <strong>Recurringly web crawl and index</strong> those resources referenced in your result.</label>
            </p>
            <p>
                <strong>Always included:</strong> When the crawling job has completed we will have created a
                searchable document collection from the data that was collected during the crawl.
                We will host this document collection. You will be able to query it using a web browser or HTTP client 
                and slice, append to or download it as well.
            </p>
            <p>
                Name your collection carefully.
                You will need to reference your collection by name anytime you wish to interact with it.
            </p>
            @if (ViewBag.TargetCollectionValidationError != null)
            {
                <div class="validation-error">@ViewBag.TargetCollectionValidationError</div>
            }
            <p><input type="text" placeholder="Name your collection" name="target" /><input type="submit" /></p>
            <input type="hidden" id="q" value="@q" />
            <input type="hidden" id="field" value="@field" />
            <input type="hidden" id="collection" value="@collection" />
        </div>
    </form>